As a software performance analysis assistant, your task is to identify potential performance issues in Rust code
and provide recommendations for improving performance. Below are examples that demonstrate how to identify
performance bottlenecks and suggest optimizations.

Example 1: Avoiding Unnecessary Heap Allocations

```rust
fn concatenate_strings() -> String {
    let mut result = String::new();
    let words = vec!["hello", "world"];
    for word in words {
        result.push_str(word);
    }
    resul
}
```
Performance Issue: The function creates a new String with String::new() and repeatedly appends strings. This
leads to multiple reallocations as the string grows.

Recommendation: Pre-allocate memory for the string to avoid repeated reallocations. Use String::with_capacity()
to allocate enough memory upfront based on the expected size.

Improved Code:
```rust
fn concatenate_strings() -> String {
    let mut result = String::with_capacity(10); // Preallocate memory
    let words = vec!["hello", "world"];
    for word in words {
        result.push_str(word);
    }
    result
}
```

Example 2: Reducing Clone Overhead in a Loop
```rust
fn sum_of_values(values: Vec<i32>) -> i32 {
    let mut sum = 0;
    for value in values.clone() {
        sum += value;
    }
    sum
}
```
Performance Issue: The clone() call inside the loop creates an unnecessary deep copy of the vector, which is costly.

Recommendation: Avoid cloning the entire vector. Instead, iterate over the reference to the vector or take ownership
if the vector isn't needed afterward.

Improved Code:
```rust
fn sum_of_values(values: Vec<i32>) -> i32 {
    let mut sum = 0;
    for value in &values { // Use a reference to avoid cloning
        sum += *value;
    }
    sum
}
```

Example 3: Optimizing String Parsing with from_str

```rust
fn parse_numbers(input: Vec<String>) -> Vec<i32> {
    let mut result = Vec::new();
    for s in input {
        result.push(s.parse::<i32>().unwrap());
    }
    result
}
```
Performance Issue: The Vec::new() dynamically grows as numbers are parsed, leading to multiple reallocations.
Additionally, unwrap() can panic, which is not optimal for performance.

Recommendation: Use Vec::with_capacity() to pre-allocate memory. Also, handle parsing failures gracefully
instead of panicking.

Improved Code:

```rust
fn parse_numbers(input: Vec<String>) -> Vec<i32> {
    let mut result = Vec::with_capacity(input.len()); // Preallocate memory
    for s in input {
        if let Ok(num) = s.parse::<i32>() {
            result.push(num);
        }
    }
    result
}
```

Example 4: Minimizing Lock Contention in Multithreading

```rust
use std::sync::{Arc, Mutex};
use std::thread;

fn update_counter() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();
            *num += 1;
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }
}
```
Performance Issue: The use of a Mutex causes lock contention, as multiple threads are trying to update the shared
counter at the same time, which can slow down the program.

Recommendation: Use atomic types, such as AtomicUsize, for simple counters to avoid locking and reduce contention.

Improved Code:

```rust
use std::sync::Arc;
use std::sync::atomic::{AtomicUsize, Ordering};
use std::thread;

fn update_counter() {
    let counter = Arc::new(AtomicUsize::new(0));
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            counter.fetch_add(1, Ordering::SeqCst); // No locking, use atomic operations
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }
}
```

Example 5: Using Iterators for Lazy Evaluation
Rust Code:

```rust
fn double_numbers(values: Vec<i32>) -> Vec<i32> {
    let mut result = Vec::new();
    for value in values {
        result.push(value * 2);
    }
    result
}
```
Performance Issue: The use of a for loop with push() constructs the output vector eagerly, which can be inefficient,
especially for large datasets.

Recommendation: Use Rustâ€™s iter() and map() for lazy evaluation to avoid building intermediate collections.

Improved Code:

```rust
fn double_numbers(values: Vec<i32>) -> Vec<i32> {
    values.into_iter().map(|x| x * 2).collect() // Use iterator for lazy evaluation
}
```

Query (New Code to Analyze):

```rust
fn find_max_value(arr: Vec<i32>) -> i32 {
    let mut max = arr[0];
    for &val in arr.iter() {
        if val > max {
            max = val;
        }
    }
    max
}
```
Expected Output:
Performance Issue: The use of .iter() with explicit dereferencing inside the loop may cause unnecessary complexity
and missed optimizations.

Recommendation: Use .into_iter() directly, which consumes the vector and reduces overhead. Additionally, consider
using iter().max() for built-in iterator optimizations.

Improved Code:

```rust
fn find_max_value(arr: Vec<i32>) -> i32 {
    *arr.iter().max().unwrap() // Utilize built-in iterator optimization
}
```

Here is the code I'd like you to optimize::
{{CODE}}